#


Read in 81 micro instructions
Read in 127 machine instructions

ProgramCounter : 0000000000110111  base 10:      55
Accumulator    : 0000000000000000  base 10:       0
InstructionReg : 1111111100000000  base 10:   65280
TempInstr      : 1000000000000000  base 10:   32768
StackPointer   : 0000111110000000  base 10:    3968
ARegister      : 0000000000000001  base 10:       1
BRegister      : 0000000000000000  base 10:       0
CRegister      : 0000000000000000  base 10:       0
DRegister      : 0000000000000000  base 10:       0
ERegister      : 0000000000000000  base 10:       0
FRegister      : 0000000000000000  base 10:       0

Total cycles   : 680099

Type decimal address to view memory,  q  to quit or  c  to continue: 27
     the location   27 has value 0000000000011100 , or    28  or signed     28
Type  <Enter>  to continue debugging
Type        q  to quit
Type        f for forward range
Type        b for backward range: f
Type the number of forward locations to dump: 20
     the location   28 has value 0000000000000000 , or     0  or signed      0 #It looks like every
     the location   29 has value 0000000000000001 , or     1  or signed      1 #2 numbers the output
     the location   30 has value 0000000000000001 , or     1  or signed      1 #doubles
     the location   31 has value 0000000000000010 , or     2  or signed      2 #I assume this means
     the location   32 has value 0000000000000010 , or     2  or signed      2 #that there are cases
     the location   33 has value 0000000000000100 , or     4  or signed      4 #where the base case
     the location   34 has value 0000000000000100 , or     4  or signed      4 #of 1 activates when it
     the location   35 has value 0000000000001000 , or     8  or signed      8 #shouldn't
     the location   36 has value 0000000000001000 , or     8  or signed      8 #because the larger the
     the location   37 has value 0000000000010000 , or    16  or signed     16 #input number the longer
     the location   38 has value 0000000000010000 , or    16  or signed     16 #the code runs and it
     the location   39 has value 0000000000100000 , or    32  or signed     32 #feels exponential
     the location   40 has value 0000000000100000 , or    32  or signed     32
     the location   41 has value 0000000001000000 , or    64  or signed     64
     the location   42 has value 0000000001000000 , or    64  or signed     64
     the location   43 has value 0000000000000000 , or     0  or signed      0 # Here we overflow the
     the location   44 has value 0000000000000000 , or     0  or signed      0 # the int presumably
     the location   45 has value 0000000000000000 , or     0  or signed      0 
     the location   46 has value 0000000000000000 , or     0  or signed      0
     the location   47 has value 0000000000000000 , or     0  or signed      0

